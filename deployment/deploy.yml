apiVersion: v1
kind: Template
metadata:
  name: entitlements-api-go
objects:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: entitlements-api-go
    name: entitlements-api-go
  spec:
    minReadySeconds: 15
    progressDeadlineSeconds: 600
    replicas: ${{REPLICAS}}
    revisionHistoryLimit: 9
    selector:
      matchLabels:
        app: entitlements-api-go
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        labels:
          app: entitlements-api-go
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app
                    operator: In
                    values:
                    - entitlements-api-go
                topologyKey: failure-domain.beta.kubernetes.io/zone
              weight: 100
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app
                    operator: In
                    values:
                    - entitlements-api-go
                topologyKey: kubernetes.io/hostname
              weight: 99
        containers:
        - env:
          - name: ENT_CERTS_FROM_ENV
            value: 'true'
          - name: ENT_CA_PATH
            value: /resources/ca.crt
          - name: ENT_SUBS_HOST
            value: ${SUBS_HOST}
          - name: ENT_OPENAPI_SPEC_PATH
            value: /apispec/api.spec.json
          - name: ENT_BUNDLE_INFO_YAML
            value: /bundles/bundles.yml
          - name: ENT_CW_LOG_GROUP
            valueFrom:
              secretKeyRef:
                key: log_group_name
                name: cloudwatch
          - name: ENT_CW_REGION
            valueFrom:
              secretKeyRef:
                key: aws_region
                name: cloudwatch
          - name: ENT_CW_SECRET
            valueFrom:
              secretKeyRef:
                key: aws_secret_access_key
                name: cloudwatch
          - name: ENT_CW_KEY
            valueFrom:
              secretKeyRef:
                key: aws_access_key_id
                name: cloudwatch
          - name: SENTRY_DSN
            valueFrom:
              secretKeyRef:
                key: sentry-dsn
                name: entitlements-secret
                optional: true
          envFrom:
          - secretRef:
              name: go-api-certs
          image: quay.io/cloudservices/entitlements-api-go:${IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /status
              port: 3000
            initialDelaySeconds: 20
            timeoutSeconds: 60
          name: entitlements-api-go
          readinessProbe:
            httpGet:
              path: /status
              port: 3000
            initialDelaySeconds: 30
            timeoutSeconds: 60
          resources:
            limits:
              cpu: 500m
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 250Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /bundles
            name: default-entitlements-config
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: quay-cloudservices-pull
        - name: rh-registry-pull
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            name: ${CONFIG_MAP_NAME}
          name: default-entitlements-config
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      prometheus.io/port: '3000'
      prometheus.io/scrape: 'true'
    labels:
      app: entitlements-api-go
    name: entitlements-api-go
  spec:
    ports:
    - name: 3000-tcp
      port: 3000
      protocol: TCP
      targetPort: 3000
    selector:
      app: entitlements-api-go
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
parameters:
- description: Subscriptions Service API endpoint
  name: SUBS_HOST
  value: https://subscription.qa.api.redhat.com
- description: Name of the entitlements-config config map
  name: CONFIG_MAP_NAME
  value: entitlements-config
- description: The number of replicas to use in the deployment
  name: REPLICAS
  value: '1'
- description: Image tag
  name: IMAGE_TAG
  required: true
